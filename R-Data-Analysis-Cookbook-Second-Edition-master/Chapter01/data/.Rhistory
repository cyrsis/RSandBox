value=c(13,5,22,12,11,7,3,1,23)
data=data.frame(branch,subbranch,value)
treemap(data,
index=c("branch","subbranch"),
vSize="value",
type="index"
)
data=read.csv("post-data.csv")
treemap(data,
index=c("category"),
vSize="views",
type="index"
)
treemap(data,
index=c("category", "comments"),
vSize="views",
type="index"
)
mosaicplot(~ gear + carb, data = mtcars, color = TRUE, las = 1)
mosaicplot(~ gear + carb, data = mtcars, color = 2:4, las = 1)
mosaicplot(~ gear + carb, data = mtcars, color = 2:5, las = 1)
mosaicplot(~ White + Male + Bachelors, data = adult, color = 2:5)
adult=read.csv("adult.csv")
mosaicplot(~ White + Male + Bachelors, data = adult, color = 2:5)
mosaicplot(~ White  + Bachelors, data = adult, color = 2:5)
mosaicplot(~ White  + Male, data = adult, color = 2:5)
library(stats)
mtcars=read.csv("mtcars.csv")
mosaicplot(~ gear + carb, data = mtcars, color = 2:5, las = 1,shade = TRUE, legend = TRUE)
mosaicplot(~ gear + carb, data = mtcars, color = 2:5, las = 1, legend = TRUE)
mosaicplot(~ gear + carb, data = mtcars, color = 2:5, las = 1)
install.packages("ggmosaic")
library(ggmosaic)
data("Titanic")
View(Titanic)
View(Titanic)
ggplot(data = mtcars) +
geom_mosaic(aes(weight = gear, x = carb, fill=factor(X)), na.rm=TRUE) +
labs(x="Hours of sleep a night ", title='f(SleepHrsNight)') + guides(fill=guide_legend(title = "SleepHrsNight", reverse = TRUE))
View(NHANES)
data=data.frame(branch,subbranch,value)
set.seed(1234)
x <- data.frame(x=rnorm(1000))
ggplot(data=x, aes(x=x, fill=..count..)) + geom_histogram()
plot <- ggplot(auto, aes(weight, mpg))
auto <- read.csv("auto-mpg.csv", stringsAsFactors=FALSE)
plot <- ggplot(auto, aes(weight, mpg))
plot + geom_line()
plot <- ggplot(mtcars, aes(wt, mpg))
plot + geom_line()
plot + geom_line() +geom_point()
plot + geom_line(linetype = "dashed")
plot + geom_line(color="red")
plot2 <- ggplot(mtcars, aes(x=wt, y=mpg, group=as.factor(carb)))
plot2 + geom_line(aes(linetype=as.factor(carb)))
plot2 <- ggplot(mtcars, aes(x=disp, y=hp, group=as.factor(carb)))
plot2 + geom_line(aes(linetype=as.factor(carb)))
plot2 + geom_line(aes(color=as.factor(carb)))
plot2+ geom_line(linetype="dashed", size=1, colour="blue")
plot+ geom_line(linetype="dashed", size=1, colour="blue")
plot2+
geom_point()+stat_smooth(method="lm")
plot+ geom_point()+stat_smooth(method="lm")
plot + geom_line(aes(color=as.factor(carb)))
plot2 + geom_line(aes(color=as.factor(carb)))
plot + geom_line(aes(linetype = "dashed",color="red"))
plot + geom_line(linetype = "dashed",color="red")
plot <- ggplot(mtcars, aes(wt, mpg))
plot + geom_line()
plot + geom_line(linetype = "dashed",color="red")
plot + geom_line(aes(color=as.factor(carb)))
bike <- read.csv("daily-bike-rentals.csv")
bike$season <- factor(bike$season, levels = c(1,2,3,4),labels = c("Spring", "Summer", "Fall", "Winter"))
spring <- subset(bike, season == "Spring")$cnt
summer <- subset(bike, season == "Summer")$cnt
fall <- subset(bike, season == "Fall")$cnt
winter <- subset(bike, season == "Winter")$cnt
ggplot(cnt, data = bike) +
facet_wrap(~ season, nrow=2) +
geom_histogram(fill = "blue") +
geom_vline(xintercept = mean(cnt), colour = "red")+
labs(x = "Rentals", y= "Frequency", title = "Rentals Frequency by Season") +
theme(plot.title = element_text(hjust = 0.5))
qplot(cnt, data = bike) + facet_wrap(~ season, nrow=2) + geom_histogram(fill = "blue")
ggplot(cnt, data = bike)
qplot(cnt, data = bike)
bike <- read.csv("daily-bike-rentals.csv")
bike$season <- factor(bike$season, levels = c(1,2,3,4),labels = c("Spring", "Summer", "Fall", "Winter"))
spring <- subset(bike, season == "Spring")$cnt
summer <- subset(bike, season == "Summer")$cnt
fall <- subset(bike, season == "Fall")$cnt
winter <- subset(bike, season == "Winter")$cnt
ggplot(bike$cnt, data = bike) +
facet_wrap(~ season, nrow=2) +
geom_histogram(fill = "blue") +
geom_vline(xintercept = mean(cnt), colour = "red")+
labs(x = "Rentals", y= "Frequency", title = "Rentals Frequency by Season") +
theme(plot.title = element_text(hjust = 0.5))
ggplot(bike$cnt, data = bike) +
facet_wrap(~ season, nrow=2) +
geom_histogram(fill = "blue") +
geom_vline(xintercept = mean(cnt), colour = "red")+
labs(x = "Rentals", y= "Frequency", title = "Rentals Frequency by Season")
ggplot(bike$cnt, data = bike) +
facet_wrap(~ season, nrow=2)
ggplot(bike$cnt, data = bike) +
facet_wrap(aes(~ season), nrow=2)
ggplot(bike$cnt, data = bike) +
facet_wrap(aes(~ season, nrow=2)
+
geom_histogram(fill = "blue")
)
ggplot(bike$cnt, data = bike) +
facet_wrap(aes(~ season, nrow=2))
ggplot(bike$cnt, data = bike) +
facet_grid(~ season)
ggplot(bike$cnt, data = bike) +
facet_grid(season ~.)
ggplot(aes(x=bike$cnt), data = bike) +
facet_grid(season ~.)
+
geom_histogram(fill = "blue")
ggplot(aes(x=bike$cnt), data = bike) +
facet_grid(season ~.) +
geom_histogram(fill = "blue")
ggplot(aes(x=bike$cnt), data = bike) +
facet_grid(season ~.) +
geom_histogram(fill = "blue") +
geom_vline(xintercept = mean(cnt), colour = "red")+
labs(x = "Rentals", y= "Frequency", title = "Rentals Frequency by Season")
ggplot(aes(x=bike$cnt), data = bike) +
facet_grid(season ~.) +
geom_histogram(fill = "blue") +
geom_vline(xintercept = mean(bike$cnt), colour = "red")+
labs(x = "Rentals", y= "Frequency", title = "Rentals Frequency by Season")
qplot(cnt, data = bike) + facet_wrap(~ season, nrow=2) + geom_histogram(fill = "blue") +geom_density(linetype="dashed")
qplot(cnt, data = bike) + geom_histogram(fill = "blue") +geom_density(linetype="dashed")
qplot(cnt, data = bike)  +geom_density(linetype="dashed")
qplot(cnt, data = bike)  +geom_density()
qplot(windspeed, data = bike)  +geom_density()
qplot(temp, data = bike)  +geom_density()
qplot(casual, data = bike)  +geom_density()
library(MASS)
ggplot(birthwt, aes(x=bwt)) + geom_histogram(fill="white", colour="black") +
facet_grid(smoke ~ .)
birthwt
faithful=read.csv("faithful")
faithful=read.csv("faithful.csv")
ggplot(faithful, aes(x=waiting)) + geom_histogram()
ggplot(faithful, aes(x=waiting)) +
geom_histogram(binwidth=5, fill="white", colour="black")
ggplot(faithful, aes(x=waiting)) +
geom_histogram(binwidth=5, fill="blue", colour="black")
ggplot(faithful, aes(x=waiting, y=..density..)) +
geom_histogram(fill="cornsilk", colour="grey60", size=.2) +
geom_density() +
xlim(35, 105)
library(ggplot2)
toothgrowth=read.csv("ToothGrowth.csv")
p <- ggplot(toothgrowth, aes(x=dose, y=len, fill=dose)) + geom_boxplot()
p
p + ggtitle("Tooth groth Length vs Dose(milligram/day) ")
p + xlab("Dose of Vitamin C(milligram/day)")
p + ylab("Tooth Length")
p + xlab("Dose of Vitamin C(milligram/day)")
p + xlab("Dose of Vitamin C(milligram/day)") + ylab("Tooth Length")
p + theme(legend.position="top")
p <- ggplot(toothgrowth, aes(x=dose, y=len, fill=as.factor(dose)) + geom_boxplot()
p <- ggplot(toothgrowth, aes(x=dose, y=len, fill=as.factor(dose))) + geom_boxplot()
p <- ggplot(toothgrowth, aes(x=dose, y=len, fill=as.factor(dose))) + geom_boxplot()
p + ggtitle("Tooth groth Length vs Dose(mg/day) ")
p <- ggplot(toothgrowth, aes(x=dose, y=len)) + geom_boxplot()
p + ggtitle("Tooth groth Length vs Dose(mg/day) ")
p + xlab("Dose of Vitamin C(mg/day)") + ylab("Tooth Length")
p_leg <- ggplot(toothgrowth, aes(x=dose, y=len, fill=as.factor(dose))) + geom_boxplot()
p_leg + labs(fill = "Dose (mg)")
p_leg + theme(legend.position="top")
p_leg + labs(fill = "Dose (mg)")+  theme(legend.position="top")
p_leg + guides(fill=FALSE)
p <- ggplot(toothgrowth, aes(x=dose, y=len)) + geom_boxplot()
p + ggtitle("Tooth groth Length vs Dose(mg/day) ")
p + xlab("Dose of Vitamin C(mg/day)") + ylab("Tooth Length")
p_leg <- ggplot(toothgrowth, aes(x=dose, y=len, fill=as.factor(dose))) + geom_boxplot()
p_leg + labs(fill = "Dose (mg)")
p_leg + labs(fill = "Dose (mg)")+  theme(legend.position="top")
p_leg + guides(fill=FALSE)
p + ggtitle("Tooth groth Length vs Dose(mg/day) ") +
xlab("Dose of Vitamin C(mg/day)") +
ylab("Tooth Length")
p <- ggplot(toothgrowth, aes(x=dose, y=len)) + geom_boxplot()
p + theme_bw()
p + theme_dark()
p + theme_grey()
p + theme(plot.background = element_rect(fill = "darkblue"))
p + theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=45))
p + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
par(mfrow=c(2,2))
p + theme_bw()
p + theme_dark()
p + theme_bw()
p + theme_grey()
p + theme(plot.background = element_rect(fill = "darkblue"))
p + theme(axis.text.x = element_text(face="bold", color="#993333",
size=14, angle=45),
axis.text.y = element_text(face="bold", color="#993333",
size=14, angle=45))
p + theme(panel.border = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank())
p + theme_grey()
library(igraph)
graph_directed <- graph(edges=c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6, 5,6),n=6)
graph_undirected <- graph(edges=c(1,2, 2,3, 2,4, 1,4, 5,5, 3,6, 5,6),n=6, directed=FALSE)
par(mfrow=c(1,2))
plot(graph_directed)
plot(graph_undirected)
graph_isolation <- graph( c( "Kuntal", "Maulim", "Maulim", "Yana","Yana","Kuntal", "Ranadeep", "Rabindrika","Ranadeep", "Kuntal"),
isolates=c("Suman", "Arunava", "Raja", "Manish","Gina") )
plot(graph_isolation, edge.arrow.size=.5, vertex.color="gold", vertex.size=15,
vertex.frame.color="gray", vertex.label.color="black",
vertex.label.cex=0.8, vertex.label.dist=2, edge.curved=0.2)
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter1/data
")
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter1/data")
housing.dat <- read.csv("housing-with-missing-value.csv",header = TRUE, stringsAsFactors = FALSE)
summary(housing.dat)
housing.dat.1 <- na.omit(housing.dat)
drop_na <- c("rad")
housing.dat.2 <-housing.dat [complete.cases(housing.dat [ , !(names(housing.dat)) %in% drop_na]),]
summary(housing.dat.1$rad)
summary(housing.dat.1$ptratio)
summary(housing.dat.2$rad)
summary(housing.dat.2$ptratio)
housing.dat.3 <- housing.dat$rad <- NULL
drops <- c("ptratio","rad")
housing.dat.4 <- housing.dat[ , !(names(housing.dat) %in% drops)]
summary(housing.dat.4)
library(mice)
install.packages("mice")
library(mice)
md.pattern(housing.dat)
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter4/data")
dat <- read.csv("rmse-example.csv")
rmse <- sqrt(mean((dat$price-dat$pred)^2))
rmse
library(nnet)
library(caret)
library(devtools)
bh <- read.csv("BostonHousing.csv")
set.seed(1000)
t.idx <- createDataPartition(bh$MEDV, p=0.7, list=FALSE)
summary(bh$MEDV)
fit <- nnet(MEDV/50 ~ ., data=bh[t.idx,], size=6, decay = 0.1, maxit = 1000, linout = TRUE)
source_url('https://gist.githubusercontent.com/fawda123/7471137/raw/466c1474d0a505ff044412703516c34f1a4684a5/nnet_plot_update.r')
plot(fit, max.sp = TRUE)
library(caret)
auto <- read.csv("auto-mpg.csv")
auto$cylinders <- factor(auto$cylinders, levels = c(3,4,5,6,8), labels = c("3cyl", "4cyl", "5cyl", "6cyl", "8cyl"))
set.seed(1000)
t.idx <- createDataPartition(auto$mpg, p = 0.7, list = FALSE)
names(auto)
mod <- lm(mpg ~ ., data = auto[t.idx, -c(1,8,9)])
mod
summary(mod)
pred <- predict(mod, auto[-t.idx, -c(1,8,9)])
sqrt(mean((pred - auto[-t.idx, 2])^2))
par(mfrow = c(2,2))
plot(mod)
par(mfrow = c(1,1))
auto <- within(auto, cylinders <- relevel(cylinders, ref = "4cyl") )
mod <- lm(mpg ~., data = auto[t.idx, -c(1, 8, 9)])
library(rpart)
library(rpart.plot)
library(caret)
bh <- read.csv("BostonHousing.csv")
set.seed(1000)
t.idx <- createDataPartition(bh$MEDV, p=0.7, list = FALSE)
bfit <- rpart(MEDV ~ ., data = bh[t.idx,])
bfit
prp(bfit, type=2, nn=TRUE, fallen.leaves=TRUE, faclen=4, varlen=8, shadow.col="gray")
bfit$cptable
plotcp(bfit)
prp(bfit, type=2, nn=TRUE, fallen.leaves=TRUE, faclen=4, varlen=8, shadow.col="gray")
library(rpart.plot)
install.packages("rpart.plot")
library(rpart.plot)
prp(bfit, type=2, nn=TRUE, fallen.leaves=TRUE, faclen=4, varlen=8, shadow.col="gray")
library(randomForest)
library(caret)
install.packages("randomForest")
#-----------------------------------------------------------------
library(randomForest)
library(caret)
bn <- read.csv("BostonHousing.csv")
set.seed(1000)
t.idx <- createDataPartition(bh$MEDV, p=0.7, list=FALSE)
mod <- randomForest(x = bh[t.idx,1:13], y=bh[t.idx,14],ntree=1000,  xtest = bh[-t.idx,1:13], ytest = bh[-t.idx,14], importance=TRUE, keep.forest=TRUE)
mod
mod$importance
plot(bh[t.idx,14], predict( mod, newdata=bh[t.idx,]), xlab = "Actual", ylab = "Predicted")
plot(bh[t.idx,14], mod$predicted, xlab = "Actual", ylab = "Predicted")
plot(bh[-t.idx,14], mod$test$predicted, xlab = "Actual", ylab = "Predicted")
cp <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels =  c("Low", "Medium", "High"))
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
prop.table(tab)
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter3/data")
p <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels =  c("Low", "Medium", "High"))
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
cp <- read.csv("college-perf.csv")
cp$Perf <- ordered(cp$Perf, levels = c("Low", "Medium", "High"))
cp$Pred <- ordered(cp$Pred, levels =  c("Low", "Medium", "High"))
tab <- table(cp$Perf, cp$Pred, dnn = c("Actual", "Predicted"))
tab
prop.table(tab)
barplot(tab, legend = TRUE)
mosaicplot(tab, main = "Prediction performance")
library(randomForest)
library(caret)
bn <- read.csv("banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(1000)
sub.idx <- createDataPartition(bn$class, p=0.7, list=FALSE)
mod <- randomForest(x = bn[sub.idx,1:4], y=bn[sub.idx,5],ntree=500, keep.forest=TRUE)
pred <- predict(mod, bn[-sub.idx,])
table(bn[-sub.idx,"class"], pred, dnn = c("Actual", "Predicted"))
probs <- predict(mod, bn[-sub.idx,], type = "prob")
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
perf <- performance(pred, "tpr", "fpr")
plot(perf)
pred <- predict(mod, bn[-sub.idx,])
table(bn[-sub.idx,"class"], pred, dnn = c("Actual", "Predicted"))
probs <- predict(mod, bn[-sub.idx,], type = "prob")
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
library(randomForest)
library(caret)
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
library(ROCR)
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
perf <- performance(pred, "tpr", "fpr")
plot(perf)
library(randomForest)
library(caret)
library(ROCR)
bn <- read.csv("banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(1000)
sub.idx <- createDataPartition(bn$class, p=0.7, list=FALSE)
mod <- randomForest(x = bn[sub.idx,1:4], y=bn[sub.idx,5],ntree=500, keep.forest=TRUE)
pred <- predict(mod, bn[-sub.idx,])
table(bn[-sub.idx,"class"], pred, dnn = c("Actual", "Predicted"))
probs <- predict(mod, bn[-sub.idx,], type = "prob")
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
perf <- performance(pred, "tpr", "fpr")
plot(perf)
library(randomForest)
library(caret)
library(ROCR)
bn <- read.csv("banknote-authentication.csv")
bn$class <- factor(bn$class)
set.seed(1000)
sub.idx <- createDataPartition(bn$class, p=0.7, list=FALSE)
mod <- randomForest(x = bn[sub.idx,1:4], y=bn[sub.idx,5],ntree=500, keep.forest=TRUE)
pred <- predict(mod, bn[-sub.idx,])
table(bn[-sub.idx,"class"], pred, dnn = c("Actual", "Predicted"))
probs <- predict(mod, bn[-sub.idx,], type = "prob")
pred <- prediction(probs[,2], bn[-sub.idx,"class"])
perf <- performance(pred, "tpr", "fpr")
plot(perf)
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter2/data")
library(lattice)
bike <- read.csv("daily-bike-rentals.csv")
bike$season <- factor(bike$season, levels = c(1,2,3,4),
labels = c("Spring", "Summer", "Fall", "Winter"))
bike$weathersit <- factor(bike$weathersit, levels = c(1,2,3),
labels = c("Clear", "Misty/cloudy", "Light snow"))
bike$dteday = as.Date(bike$dteday, format = "%Y-%m-%d")
attach(bike)
bwplot(cnt ~ weathersit,  data = bike,
xlab = "Weathersit", ylab = "Frequency")
bwplot(cnt ~ weathersit, data=bike, layout=c(2,1),
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2)))
bwplot(cnt ~ weathersit, data=bike, layout=c(2,1),
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(2,1),
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(2,1),,xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(2,1),xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(1,1),xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
stripplot(cnt ~ weathersit,  data = bike,jitter.data = TRUE, pch = 19,
xlab = "Weathersit", ylab = "Frequency")
stripplot(cnt ~ weathersit,  data = bike,jitter.data = TRUE,
xlab = "Weathersit", ylab = "Frequency")
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(cnt ~ weathersit, data=bike, layout=c(1,1),xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
panel.stripplot(cnt ~ weathersit,  data = bike,jitter.data = TRUE,
xlab = "Weathersit", ylab = "Frequency")
})
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,col=cols,...)
})
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,...)
})
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.violin
panel.stripplot(x,y,jitter.data = TRUE,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,panel.violin,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(1,1),xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','blue','green'),2))))
bwplot(cnt ~ weathersit,panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
bwplot(cnt ~ weathersit, data=bike, layout=c(1,1),xlab = "Weathersit", ylab = "Frequency",
par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
bwplot(cnt ~ weathersit,xlab = "Weathersit", ylab = "Frequency",panel=function(x,y,...){
panel.bwplot(x,y,...)
panel.stripplot(x,y,jitter.data = TRUE,...)
}, par.settings = list(box.rectangle = list(fill= rep(c('red','yellow','green'),2))))
setwd("/Users/kuntalg/knowledge/repo/Books/R-Data-Analysis-Cookbook/Code/Chapter1/data")
if (!require("XML")) install.packages(c("XML","RCurl"))
install.packages(c("XML","RCurl"))
install.packages(c("XML", "RCurl"))
library(XML)
library(RCurl)
url <- "http://en.wikipedia.org/wiki/World_population"
tabs <- getURL(url)
tables <- readHTMLTable(tabs)
table <- readHTMLTable(url,which=5)
tables <- readHTMLTable(tabs)
library(httr)
tabs <- GET(url)
tables <- readHTMLTable(rawToChar(tabs$content))
world.pop <- tables[[5]]
world.pop
library(XML)
url <- "cd_catalog.xml"
xmldoc <- xmlParse(url)
rootNode <- xmlRoot(xmldoc)
rootNode[1]
url <- "WorldPopulation-wiki.htm"
tables <- readHTMLTable(url)
world.pop <- tables[[5]]
world.pop
table <- readHTMLTable(url,which=5)
table
tables
table <- readHTMLTable(url,which=2012)
table <- readHTMLTable(url,which=2012)
url <- "WorldPopulation-wiki.htm"
tables <- readHTMLTable(url)
world.pop <- tables[[5]]
table <- readHTMLTable(url,which=2012)
table <- readHTMLTable(url,which=6)
table
world.pop
world.pop <- tables[[6]]
world.pop
install.packages("mice")
library(mice)
md.pattern(housing.dat)
summary(housing.dat)
library(VIM)
install.packages("VIM")
library(VIM)
aggr_plot <- aggr(housing.dat, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(data), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(housing.dat, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(housing.dat), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
aggr_plot <- aggr(housing.dat, col=c('navyblue','red'), numbers=TRUE, sortVars=TRUE, labels=names(housing.dat), cex.axis=.7, gap=3, ylab=c("Histogram of missing data","Pattern"))
library(DMwR)
ozoneData <- read.csv("ozone.csv", stringsAsFactors=FALSE)
outlier.scores <- lofactor(ozoneData, k=5)
outliers <- order(outlier.scores, decreasing=T)[1:5]
print(outliers)
n <- nrow(ozoneData)
labels <- 1:n
labels[-outliers] <- "."
biplot(prcomp(ozoneData), cex=.8, xlabs=labels)
outlier.scores <- lofactor(ozoneData, k=5)
outliers <- order(outlier.scores, decreasing=T)[1:3]
print(outliers)
outlier.scores <- lofactor(ozoneData, k=3)
outliers <- order(outlier.scores, decreasing=T)[1:3]
print(outliers)
